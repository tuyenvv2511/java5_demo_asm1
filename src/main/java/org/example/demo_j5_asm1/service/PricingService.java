package org.example.demo_j5_asm1.service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.List;

import org.example.demo_j5_asm1.entity.Product;
import org.example.demo_j5_asm1.entity.Sale;
import org.example.demo_j5_asm1.repository.SaleRepository;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PricingService {
    private final SaleRepository saleRepo;

    /**
     * G·ª£i √Ω gi√° d·ª±a tr√™n d·ªØ li·ªáu b√°n h√†ng g·∫ßn ƒë√¢y
     * Thu·∫≠t to√°n AI th√¥ng minh ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng
     */
    public BigDecimal suggestPrice(Product product) {
        LocalDateTime from = LocalDateTime.now().minusDays(30);
        BigDecimal avgPrice = saleRepo.avgPriceLastDays(
                product.getBrand().getId(), product.getTitle(), from);
        
        if (avgPrice == null) {
            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠, s·ª≠ d·ª•ng gi√° hi·ªán t·∫°i v·ªõi ƒëi·ªÅu ch·ªânh nh·∫π
            BigDecimal basePrice = product.getPrice() != null ? product.getPrice() : new BigDecimal("1000000");
            BigDecimal conditionFactor = getConditionFactor(product);
            return basePrice.multiply(conditionFactor).setScale(0, RoundingMode.HALF_UP);
        }

        // H·ªá s·ªë ƒëi·ªÅu ch·ªânh theo t√¨nh tr·∫°ng s·∫£n ph·∫©m
        BigDecimal conditionFactor = getConditionFactor(product);
        
        // H·ªá s·ªë ƒëi·ªÅu ch·ªânh theo xu h∆∞·ªõng th·ªã tr∆∞·ªùng
        BigDecimal trendFactor = getTrendFactor(product.getBrand().getId(), product.getTitle());
        
        // T√≠nh to√°n gi√° g·ª£i √Ω cu·ªëi c√πng
        BigDecimal suggestedPrice = avgPrice.multiply(conditionFactor).multiply(trendFactor);
        
        return suggestedPrice.setScale(0, RoundingMode.HALF_UP);
    }

    /**
     * L·∫•y h·ªá s·ªë ƒëi·ªÅu ch·ªânh theo t√¨nh tr·∫°ng s·∫£n ph·∫©m
     */
    private BigDecimal getConditionFactor(Product product) {
        return switch (product.getConditionGrade()) {
            case NEW -> BigDecimal.valueOf(1.05);      // M·ªõi: +5%
            case LIKE_NEW -> BigDecimal.valueOf(1.00); // G·∫ßn nh∆∞ m·ªõi: gi·ªØ nguy√™n
            case GOOD -> BigDecimal.valueOf(0.96);     // T·ªët: -4%
            case USED -> BigDecimal.valueOf(0.92);     // ƒê√£ s·ª≠ d·ª•ng: -8%
        };
    }

    /**
     * Ph√¢n t√≠ch xu h∆∞·ªõng th·ªã tr∆∞·ªùng d·ª±a tr√™n d·ªØ li·ªáu 60 ng√†y g·∫ßn ƒë√¢y
     */
    private BigDecimal getTrendFactor(Long brandId, String title) {
        LocalDateTime from60Days = LocalDateTime.now().minusDays(60);
        LocalDateTime from30Days = LocalDateTime.now().minusDays(30);
        
        // Gi√° trung b√¨nh 30-60 ng√†y tr∆∞·ªõc
        BigDecimal avgOld = saleRepo.avgPriceBetween(
                brandId, title, from60Days, from30Days);
        
        // Gi√° trung b√¨nh 30 ng√†y g·∫ßn ƒë√¢y
        BigDecimal avgRecent = saleRepo.avgPriceLastDays(brandId, title, from30Days);
        
        if (avgOld == null || avgRecent == null) {
            return BigDecimal.valueOf(1.0); // Kh√¥ng c√≥ d·ªØ li·ªáu, gi·ªØ nguy√™n
        }
        
        // T√≠nh t·ª∑ l·ªá tƒÉng/gi·∫£m
        BigDecimal trendRatio = avgRecent.divide(avgOld, 4, RoundingMode.HALF_UP);
        
        // ƒêi·ªÅu ch·ªânh xu h∆∞·ªõng (ch·ªâ √°p d·ª•ng 50% ƒë·ªÉ tr√°nh bi·∫øn ƒë·ªông qu√° m·∫°nh)
        BigDecimal trendFactor = BigDecimal.valueOf(1.0)
                .add(trendRatio.subtract(BigDecimal.valueOf(1.0))
                        .multiply(BigDecimal.valueOf(0.5)));
        
        // Gi·ªõi h·∫°n trong kho·∫£ng 0.9 - 1.1 (kh√¥ng qu√° ¬±10%)
        return trendFactor.max(BigDecimal.valueOf(0.9))
                          .min(BigDecimal.valueOf(1.1));
    }

    /**
     * Ph√¢n t√≠ch chi ti·∫øt gi√° c·∫£ cho m·ªôt s·∫£n ph·∫©m
     */
    public PricingAnalysis analyzePricing(Product product) {
        LocalDateTime from30Days = LocalDateTime.now().minusDays(30);
        LocalDateTime from60Days = LocalDateTime.now().minusDays(60);
        
        BigDecimal avg30Days = saleRepo.avgPriceLastDays(
                product.getBrand().getId(), product.getTitle(), from30Days);
        
        BigDecimal avg60Days = saleRepo.avgPriceBetween(
                product.getBrand().getId(), product.getTitle(), from60Days, from30Days);
        
        List<Sale> recentSales = saleRepo.findRecentSales(
                product.getBrand().getId(), product.getTitle(), from30Days);
        
        BigDecimal suggestedPrice = suggestPrice(product);
        BigDecimal currentPrice = product.getPrice();
        
        String trend = "STABLE";
        if (avg30Days != null && avg60Days != null) {
            if (avg30Days.compareTo(avg60Days) > 0) {
                trend = "RISING";
            } else if (avg30Days.compareTo(avg60Days) < 0) {
                trend = "FALLING";
            }
        }
        
        return PricingAnalysis.builder()
                .suggestedPrice(suggestedPrice)
                .currentPrice(currentPrice)
                .averagePrice30Days(avg30Days)
                .averagePrice60Days(avg60Days)
                .trend(trend)
                .salesCount(recentSales.size())
                .confidence(calculateConfidence(recentSales.size()))
                .build();
    }

    /**
     * T√≠nh ƒë·ªô tin c·∫≠y c·ªßa g·ª£i √Ω gi√° (0-100%)
     */
    private int calculateConfidence(int salesCount) {
        if (salesCount >= 10) return 95;
        if (salesCount >= 5) return 85;
        if (salesCount >= 3) return 70;
        if (salesCount >= 1) return 50;
        return 20; // √çt d·ªØ li·ªáu
    }

    /**
     * L·∫•y ƒë·ªô tin c·∫≠y cho API suggestion
     */
    public BigDecimal getConfidence(Product product) {
        LocalDateTime from = LocalDateTime.now().minusDays(30);
        List<Sale> recentSales = saleRepo.findRecentSales(
                product.getBrand().getId(), product.getTitle(), from);
        
        int confidence = calculateConfidence(recentSales.size());
        return new BigDecimal(confidence);
    }

    /**
     * L·∫•y l√Ω do g·ª£i √Ω gi√°
     */
    public String getReasoning(Product product) {
        LocalDateTime from = LocalDateTime.now().minusDays(30);
        List<Sale> recentSales = saleRepo.findRecentSales(
                product.getBrand().getId(), product.getTitle(), from);
        
        if (recentSales.isEmpty()) {
            return "D·ª±a tr√™n t√¨nh tr·∫°ng s·∫£n ph·∫©m v√† gi√° th·ªã tr∆∞·ªùng chung (√≠t d·ªØ li·ªáu l·ªãch s·ª≠)";
        } else if (recentSales.size() < 3) {
            return "D·ª±a tr√™n " + recentSales.size() + " giao d·ªãch g·∫ßn ƒë√¢y v√† t√¨nh tr·∫°ng s·∫£n ph·∫©m";
        } else {
            return "D·ª±a tr√™n " + recentSales.size() + " giao d·ªãch g·∫ßn ƒë√¢y, xu h∆∞·ªõng th·ªã tr∆∞·ªùng v√† t√¨nh tr·∫°ng s·∫£n ph·∫©m";
        }
    }

    /**
     * DTO cho ph√¢n t√≠ch gi√° c·∫£
     */
    @lombok.Data
    @lombok.Builder
    public static class PricingAnalysis {
        private BigDecimal suggestedPrice;
        private BigDecimal currentPrice;
        private BigDecimal averagePrice30Days;
        private BigDecimal averagePrice60Days;
        private String trend; // RISING, FALLING, STABLE
        private int salesCount;
        private int confidence; // 0-100%
        
        public String getTrendIcon() {
            return switch (trend) {
                case "RISING" -> "üìà";
                case "FALLING" -> "üìâ";
                default -> "‚û°Ô∏è";
            };
        }
        
        public String getTrendText() {
            return switch (trend) {
                case "RISING" -> "ƒêang tƒÉng";
                case "FALLING" -> "ƒêang gi·∫£m";
                default -> "·ªîn ƒë·ªãnh";
            };
        }
    }
}