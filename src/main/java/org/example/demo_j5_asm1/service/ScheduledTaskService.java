package org.example.demo_j5_asm1.service;

import java.time.LocalDateTime;
import java.util.List;

import org.example.demo_j5_asm1.entity.Promotion;
import org.example.demo_j5_asm1.repository.ProductRepository;
import org.example.demo_j5_asm1.repository.PromotionRepository;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class ScheduledTaskService {
    private final PromotionRepository promotionRepo;
    private final ProductRepository productRepo;

    /**
     * Ch·∫°y m·ªói 5 ph√∫t ƒë·ªÉ ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i
     */
    @Scheduled(fixedRate = 300000) // 5 ph√∫t
    public void updatePromotionStatus() {
        log.info("üîÑ Starting promotion status update...");
        
        LocalDateTime now = LocalDateTime.now();
        
        // K√≠ch ho·∫°t khuy·∫øn m√£i ƒë√£ ƒë·∫øn th·ªùi gian b·∫Øt ƒë·∫ßu
        List<Promotion> upcomingPromotions = promotionRepo.findUpcomingPromotions(now);
        for (Promotion promotion : upcomingPromotions) {
            promotion.setActive(true);
            promotionRepo.save(promotion);
            log.info("‚úÖ Activated promotion: {} for product: {}", 
                    promotion.getDescription(), promotion.getProduct().getTitle());
        }
        
        // V√¥ hi·ªáu h√≥a khuy·∫øn m√£i ƒë√£ h·∫øt h·∫°n
        List<Promotion> expiredPromotions = promotionRepo.findExpiredPromotions(now);
        for (Promotion promotion : expiredPromotions) {
            promotion.setActive(false);
            promotionRepo.save(promotion);
            log.info("‚ùå Deactivated expired promotion: {} for product: {}", 
                    promotion.getDescription(), promotion.getProduct().getTitle());
        }
        
        log.info("‚úÖ Completed promotion status update. Activated: {}, Deactivated: {}", 
                upcomingPromotions.size(), expiredPromotions.size());
    }

    /**
     * Ch·∫°y m·ªói ng√†y l√∫c 2:00 AM ƒë·ªÉ th·ªëng k√™ v√† d·ªçn d·∫πp d·ªØ li·ªáu
     */
    @Scheduled(cron = "0 0 2 * * ?") // M·ªói ng√†y l√∫c 2:00 AM
    public void dailyMaintenance() {
        log.info("üßπ Starting daily maintenance...");
        
        // Th·ªëng k√™ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        long totalProducts = productRepo.count();
        long activeProducts = productRepo.countByActiveTrue();
        
        log.info("üìä Product statistics: Total: {}, Active: {}, Inactive: {}", 
                totalProducts, activeProducts, totalProducts - activeProducts);
        
        // Th·ªëng k√™ khuy·∫øn m√£i
        long totalPromotions = promotionRepo.count();
        long activePromotions = promotionRepo.countByActiveTrue();
        
        log.info("üìä Promotion statistics: Total: {}, Active: {}, Inactive: {}", 
                totalPromotions, activePromotions, totalPromotions - activePromotions);
        
        log.info("‚úÖ Completed daily maintenance");
    }

    /**
     * Ch·∫°y m·ªói gi·ªù ƒë·ªÉ ki·ªÉm tra s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t gi√°
     */
    @Scheduled(fixedRate = 3600000) // 1 gi·ªù
    public void checkProductPricing() {
        log.info("üí∞ Checking products that need price updates...");
        
        // C√≥ th·ªÉ th√™m logic ki·ªÉm tra s·∫£n ph·∫©m c·∫ßn c·∫≠p nh·∫≠t gi√° d·ª±a tr√™n xu h∆∞·ªõng th·ªã tr∆∞·ªùng
        // V√≠ d·ª•: s·∫£n ph·∫©m c√≥ gi√° qu√° cao ho·∫∑c qu√° th·∫•p so v·ªõi trung b√¨nh th·ªã tr∆∞·ªùng
        
        log.info("‚úÖ Completed price check");
    }
    
    /**
     * Manual trigger for testing - can be called via REST endpoint
     */
    public void triggerPromotionUpdate() {
        log.info("üîß Manual trigger - Starting promotion status update...");
        updatePromotionStatus();
        log.info("üîß Manual trigger - Completed promotion status update");
    }
    
    /**
     * Manual trigger for testing - can be called via REST endpoint
     */
    public void triggerDailyMaintenance() {
        log.info("üîß Manual trigger - Starting daily maintenance...");
        dailyMaintenance();
        log.info("üîß Manual trigger - Completed daily maintenance");
    }
}
